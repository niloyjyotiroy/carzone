#include<bits/stdc++.h>
using namespace std;

int total_bandwidth=30000;
int channel_bandwidth=25*2;
int total_available_channel=total_bandwidth/channel_bandwidth;
int allocated_spectrum=1000;
int available_control_channel=allocated_spectrum/channel_bandwidth;
void channel_distribution(double N){
    cout<<"For "<< N<<" cell reuse"<<endl;
    double total_channel=total_available_channel/N;
    double voice_channel=(total_available_channel-available_control_channel)/N;
    double control_channel=total_channel-voice_channel;
    cout<<"Total number of channel per cell: "<< round(total_channel)<<endl;
    cout<<"Voice channel per cell: "<< round(voice_channel)<<endl;
    cout<<"control channel per cell: "<< round(control_channel)<<endl;

}
main(){
    channel_distribution(4);
    channel_distribution(7);
    channel_distribution(12);
    
    
    
#include<bits/stdc++.h>

using namespace std;

void cluster_size(double n, double SNRgiven, double N)
{
    double I = 6;

    double Q = sqrt(3*N);
    double SNRdb = 10*log10((pow(Q,n))/I);
    cout<<"For n = "<<n<<endl;
    if(SNRgiven <= SNRdb)
    {
        cout<<"N = "<<N<<" can be used. "<<endl;
        cout<<"Output SNRdb for N = "<<N<<" is : "<<SNRdb<<endl;
    }
    else{
        cout<<"N = "<<N<<" can not be used. "<<endl;
    }
    cout<<endl;
}

main()
{
    //cluster_size(4, 15, 3);
    cluster_size(4, 16, 7);
    cluster_size(3, 16, 7);
    cluster_size(3, 16, 12);
    cluster_size(3,16,19);
}



#include<bits/stdc++.h>
using namespace std;
double A(int tc){
    if(tc==1){
        return .005;
    }
    else if(tc==5){
        return 1.13;
    }
    else if(tc==10){
        return 3.96;
    }
    else if (tc==20){
        return 11.1;
    }
    else if(tc==100){
        return 80.9;
    }
}
main(){
    double Au = 0.1;
    double GOS = (.5/100);
    double C[]={1, 5, 10, 20, 100};
    for(auto it: C){
        cout<<"Total supported users for available channel C = "<<it<<" is : ";
        double U = A(it)/Au;
        cout<<U<<" \nby taking ceiling value : "<<ceil(U)<<endl;
        cout<<endl;
    }
}




#include<bits/stdc++.h>
using namespace std;
double Au = (2.0*3.0)/60.0;
double GOS = (2/100);
double C[]={19, 57, 100};
double cells[]={394, 98, 49};
double A(int tc){
    if(tc==19){
        return 12.0;
    }
    else if(tc==57){
        return 45.0;
    }
    else if(tc==100){
        return 88.0;
    }
}
void calculate(int i){
    double U = A(C[i])/Au;
    cout<<U<<" \nby taking ceiling value : "<<ceil(U)<<endl;
    cout<<"It can support total "<<U*cells[i]<<" users"<<endl;
    cout<<"Which is "<<(U*cells[i]/2e6)*100<<"% of the total population."<<endl;
    cout<<endl;
}
main(){
    cout<<"Total supported users for system A per cell is : ";
    calculate(0);
    cout<<"Total supported users for system B per cell is : ";
    calculate(1);
    cout<<"Total supported users for system C per cell is : ";
    calculate(2);
}

